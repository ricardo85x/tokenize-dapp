/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface UserTokensInterface extends ethers.utils.Interface {
  functions: {
    "createToken(string,string,uint8)": FunctionFragment;
    "kycContractAddress(address)": FunctionFragment;
    "myTokenSaleAddress(address)": FunctionFragment;
    "userTokenAddress(address,uint256)": FunctionFragment;
    "userTokensCount(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kycContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "myTokenSaleAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokenAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokensCount",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kycContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myTokenSaleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTokensCount",
    data: BytesLike
  ): Result;

  events: {
    "createTokenEvent(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "createTokenEvent"): EventFragment;
}

export class UserTokens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UserTokensInterface;

  functions: {
    createToken(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kycContractAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    myTokenSaleAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userTokenAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userTokensCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  createToken(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kycContractAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

  myTokenSaleAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

  userTokenAddress(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  userTokensCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createToken(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    kycContractAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    myTokenSaleAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    userTokenAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    userTokensCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    createTokenEvent(
      _userAddress?: null,
      _tokenAddress?: null
    ): TypedEventFilter<
      [string, string],
      { _userAddress: string; _tokenAddress: string }
    >;
  };

  estimateGas: {
    createToken(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kycContractAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myTokenSaleAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTokenAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTokensCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createToken(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kycContractAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myTokenSaleAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTokenAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTokensCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

(this.webpackJsonpclient=this.webpackJsonpclient||[]).push([[0],{102:function(f){f.exports=JSON.parse('{"address":"0x4803E5D9dEb9e5A55f8a49c9759E4AD8b781B2ad","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"MinterAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"MinterRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"tokenMinted","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"addMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"isMinter","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceMinter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0xb5418634366eae145c02f2e1fca8a7619e64e1ce3679ad74e64806a96f1cc799","receipt":{"to":null,"from":"0x7A6ae83d3029042B69e481a30512e672E678eff8","contractAddress":"0x4803E5D9dEb9e5A55f8a49c9759E4AD8b781B2ad","transactionIndex":0,"gasUsed":"1703683","logsBloom":"0xblockHash":"0xed13463c41bf39992b1459b6ba07add7ad007e47f4339eba2e8b880b807cc083","transactionHash":"0xb5418634366eae145c02f2e1fca8a7619e64e1ce3679ad74e64806a96f1cc799","logs":[{"transactionIndex":0,"blockNumber":102,"transactionHash":"0xb5418634366eae145c02f2e1fca8a7619e64e1ce3679ad74e64806a96f1cc799","address":"0x4803E5D9dEb9e5A55f8a49c9759E4AD8b781B2ad","topics":["0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6","0x0000000000000000000000007a6ae83d3029042b69e481a30512e672e678eff8"],"data":"0x","logIndex":0,"blockHash":"0xed13463c41bf39992b1459b6ba07add7ad007e47f4339eba2e8b880b807cc083"}],"blockNumber":102,"cumulativeGasUsed":"1703683","status":1,"byzantium":true},"args":[],"solcInputHash":"aa7183dc6bdcb033f618d6003f0c7717","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.0+commit.c7dfd78e\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"MinterAdded\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"MinterRemoved\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Transfer\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"tokenMinted\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"addMinter\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"}],\\"name\\":\\"allowance\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"decimals\\",\\"outputs\\":[{\\"internalType\\":\\"uint8\\",\\"name\\":\\"\\",\\"type\\":\\"uint8\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"subtractedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"decreaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"spender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"addedValue\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"increaseAllowance\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"}],\\"name\\":\\"isMinter\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"mint\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceMinter\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"symbol\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"totalSupply\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transfer\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"sender\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"recipient\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"transferFrom\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allowance(address,address)\\":{\\"details\\":\\"See {IERC20-allowance}.\\"},\\"approve(address,uint256)\\":{\\"details\\":\\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\\"},\\"balanceOf(address)\\":{\\"details\\":\\"See {IERC20-balanceOf}.\\"},\\"decimals()\\":{\\"details\\":\\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\"},\\"decreaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\\"},\\"increaseAllowance(address,uint256)\\":{\\"details\\":\\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\\"},\\"mint(address,uint256)\\":{\\"details\\":\\"See {ERC20-_mint}. Requirements: - the caller must have the {MinterRole}.\\"},\\"name()\\":{\\"details\\":\\"Returns the name of the token.\\"},\\"symbol()\\":{\\"details\\":\\"Returns the symbol of the token, usually a shorter version of the name.\\"},\\"totalSupply()\\":{\\"details\\":\\"See {IERC20-totalSupply}.\\"},\\"transfer(address,uint256)\\":{\\"details\\":\\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\\"},\\"transferFrom(address,address,uint256)\\":{\\"details\\":\\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/MyToken.sol\\":\\"MyToken\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":false,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC20Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\\\n * of returning `false` on failure. This behavior is nonetheless conventional\\\\n * and does not conflict with the expectations of ERC20 applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\\\n    mapping (address => uint256) private _balances;\\\\n\\\\n    mapping (address => mapping (address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * The defaut value of {decimals} is 18. To select a different value for\\\\n     * {decimals} you should overload it.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor (string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\\\n     * overridden;\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual override returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n\\\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\\\n        require(currentAllowance >= amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\");\\\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\\\n        require(currentAllowance >= subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\");\\\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\\\n     *\\\\n     * This is internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        uint256 senderBalance = _balances[sender];\\\\n        require(senderBalance >= amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        _balances[sender] = senderBalance - amount;\\\\n        _balances[recipient] += amount;\\\\n\\\\n        emit Transfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply += amount;\\\\n        _balances[account] += amount;\\\\n        emit Transfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        uint256 accountBalance = _balances[account];\\\\n        require(accountBalance >= amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        _balances[account] = accountBalance - amount;\\\\n        _totalSupply -= amount;\\\\n\\\\n        emit Transfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be to transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC20.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n *\\\\n * _Available since v4.1._\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\\",\\"license\\":\\"MIT\\"},\\"contracts/MyToken.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\nimport \\\\\\"./mint/ERC20Mintable.sol\\\\\\";\\\\n\\\\ncontract MyToken is ERC20Mintable {\\\\n    constructor() ERC20(\\\\\\"Super Pog Cappucino Token\\\\\\", \\\\\\"SPC2\\\\\\") {\\\\n        \\\\n    }\\\\n\\\\n    // This token is not divisible, so 0 decimals    \\\\n    function decimals() public view virtual override returns (uint8) {\\\\n        return 0;\\\\n    }\\\\n\\\\n    event tokenMinted(address account, uint256 amount);\\\\n\\\\n    function mint(address account, uint256 amount) public  onlyMinter override returns (bool) {\\\\n        super.mint(account, amount);\\\\n\\\\n        emit tokenMinted(account, amount);\\\\n\\\\n        return true;\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x1b623d8dec7c5519e361a58b7a01f835abca001c1b9890c722544056a5d3a9e5\\",\\"license\\":\\"MIT\\"},\\"contracts/mint/ERC20Mintable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\nimport \\\\\\"./MinterRole.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\\\\n * which have permission to mint (create) new tokens as they see fit.\\\\n *\\\\n * At construction, the deployer of the contract is the only minter.\\\\n */\\\\n abstract contract ERC20Mintable is ERC20, MinterRole {\\\\n    /**\\\\n     * @dev See {ERC20-_mint}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have the {MinterRole}.\\\\n     */\\\\n    function mint(address account, uint256 amount) public  onlyMinter virtual returns (bool) {\\\\n        _mint(account, amount);\\\\n        return true;\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x949fff5e29f963398e2f3ec75a130753431fc9e002df86351fbe77ea25cde60a\\",\\"license\\":\\"MIT\\"},\\"contracts/mint/MinterRole.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\nimport \\\\\\"./RolesLibrary.sol\\\\\\";\\\\n\\\\n\\\\ncontract MinterRole is Context {\\\\n    \\\\n    using RolesLibrary for RolesLibrary.Role;\\\\n\\\\n    event MinterAdded(address indexed account);\\\\n    event MinterRemoved(address indexed account);\\\\n\\\\n    RolesLibrary.Role private _minters;\\\\n\\\\n    constructor () {\\\\n        _addMinter(_msgSender());\\\\n    }\\\\n\\\\n    modifier onlyMinter() {\\\\n        require(isMinter(_msgSender()), \\\\\\"MinterRole: caller does not have the Minter role\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    function isMinter(address account) public view returns (bool) {\\\\n        return _minters.has(account);\\\\n    }\\\\n\\\\n    function addMinter(address account) public onlyMinter {\\\\n        _addMinter(account);\\\\n    }\\\\n\\\\n    function renounceMinter() public {\\\\n        _removeMinter(_msgSender());\\\\n    }\\\\n\\\\n    function _addMinter(address account) internal {\\\\n        _minters.add(account);\\\\n        emit MinterAdded(account);\\\\n    }\\\\n\\\\n    function _removeMinter(address account) internal {\\\\n        _minters.remove(account);\\\\n        emit MinterRemoved(account);\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x7cd5293e40b5bcf65eb7aec73e15a20799a0cc336f0470d3c142ab82a434c408\\",\\"license\\":\\"MIT\\"},\\"contracts/mint/RolesLibrary.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @title RolesX\\\\n * @dev Library for managing addresses assigned to a Role.\\\\n */\\\\nlibrary RolesLibrary {\\\\n    struct Role {\\\\n        mapping (address => bool) bearer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Give an account access to this role.\\\\n     */\\\\n    function add(Role storage role, address account) internal {\\\\n        require(!has(role, account), \\\\\\"Roles: account already has role\\\\\\");\\\\n        role.bearer[account] = true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Remove an account\'s access to this role.\\\\n     */\\\\n    function remove(Role storage role, address account) internal {\\\\n        require(has(role, account), \\\\\\"Roles: account does not have role\\\\\\");\\\\n        role.bearer[account] = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Check if an account has this role.\\\\n     * @return bool\\\\n     */\\\\n    function has(Role storage role, address account) internal view returns (bool) {\\\\n        require(account != address(0), \\\\\\"Roles: account is the zero address\\\\\\");\\\\n        return role.bearer[account];\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0xcc91980f4b2dad46d231680736e8f3a994acc2983e56db48badde2e458f58dfa\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60806040523480156200001157600080fd5b506040518060400160405280601981526020017f537570657220506f6720436170707563696e6f20546f6b656e000000000000008152506040518060400160405280600481526020017f5350433200000000000000000000000000000000000000000000000000000000815250816003908051906020019062000096929190620002bf565b508060049080519060200190620000af929190620002bf565b505050620000d2620000c6620000d860201b60201c565b620000e060201b60201c565b620004d3565b600033905090565b620000fb8160056200014160201b620009501790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b620001538282620001f460201b60201c565b1562000196576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200018d9062000419565b60405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000268576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200025f906200043b565b60405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054620002cd906200046e565b90600052602060002090601f016020900481019282620002f157600085556200033d565b82601f106200030c57805160ff19168380011785556200033d565b828001600101855582156200033d579182015b828111156200033c5782518255916020019190600101906200031f565b5b5090506200034c919062000350565b5090565b5b808211156200036b57600081600090555060010162000351565b5090565b60006200037e601f836200045d565b91507f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006000830152602082019050919050565b6000620003c06022836200045d565b91507f526f6c65733a206163636f756e7420697320746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015262000434816200036f565b9050919050565b600060208201905081810360008301526200045681620003b1565b9050919050565b600082825260208201905092915050565b600060028204905060018216806200048757607f821691505b602082108114156200049e576200049d620004a4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b611c8580620004e36000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d714610288578063a9059cbb146102b8578063aa271e1a146102e8578063dd62ed3e14610318576100f5565b806370a082311461021457806395d89b4114610244578063983b2d5614610262578063986502751461027e576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806339509351146101b457806340c10f19146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610348565b60405161010f919061187a565b60405180910390f35b610132600480360381019061012d9190611309565b6103da565b60405161013f919061185f565b60405180910390f35b6101506103f8565b60405161015d9190611a1c565b60405180910390f35b610180600480360381019061017b91906112ba565b610402565b60405161018d919061185f565b60405180910390f35b61019e610503565b6040516101ab9190611a37565b60405180910390f35b6101ce60048036038101906101c99190611309565b610508565b6040516101db919061185f565b60405180910390f35b6101fe60048036038101906101f99190611309565b6105b4565b60405161020b919061185f565b60405180910390f35b61022e60048036038101906102299190611255565b610653565b60405161023b9190611a1c565b60405180910390f35b61024c61069b565b604051610259919061187a565b60405180910390f35b61027c60048036038101906102779190611255565b61072d565b005b610286610788565b005b6102a2600480360381019061029d9190611309565b61079a565b6040516102af919061185f565b60405180910390f35b6102d260048036038101906102cd9190611309565b61088e565b6040516102df919061185f565b60405180910390f35b61030260048036038101906102fd9190611255565b6108ac565b60405161030f919061185f565b60405180910390f35b610332600480360381019061032d919061127e565b6108c9565b60405161033f9190611a1c565b60405180910390f35b60606003805461035790611b80565b80601f016020809104026020016040519081016040528092919081815260200182805461038390611b80565b80156103d05780601f106103a5576101008083540402835291602001916103d0565b820191906000526020600020905b8154815290600101906020018083116103b357829003601f168201915b5050505050905090565b60006103ee6103e76109f8565b8484610a00565b6001905092915050565b6000600254905090565b600061040f848484610bcb565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061045a6109f8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d19061195c565b60405180910390fd5b6104f7856104e66109f8565b85846104f29190611ac4565b610a00565b60019150509392505050565b600090565b60006105aa6105156109f8565b8484600160006105236109f8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105a59190611a6e565b610a00565b6001905092915050565b60006105c66105c16109f8565b6108ac565b610605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fc9061191c565b60405180910390fd5b61060f8383610e4a565b507f2d8eb9b9558d4b5ef1d238622692f6156d5822009340e26ab15fac05d64c12f08383604051610641929190611836565b60405180910390a16001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546106aa90611b80565b80601f01602080910402602001604051908101604052809291908181526020018280546106d690611b80565b80156107235780601f106106f857610100808354040283529160200191610723565b820191906000526020600020905b81548152906001019060200180831161070657829003601f168201915b5050505050905090565b61073d6107386109f8565b6108ac565b61077c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107739061191c565b60405180910390fd5b61078581610eaf565b50565b6107986107936109f8565b610f09565b565b600080600160006107a96109f8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085d906119dc565b60405180910390fd5b6108836108716109f8565b85858461087e9190611ac4565b610a00565b600191505092915050565b60006108a261089b6109f8565b8484610bcb565b6001905092915050565b60006108c2826005610f6390919063ffffffff16565b9050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61095a8282610f63565b1561099a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610991906118bc565b60405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a67906119bc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad7906118dc565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610bbe9190611a1c565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c329061199c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca29061189c565b60405180910390fd5b610cb683838361102b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d33906118fc565b60405180910390fd5b8181610d489190611ac4565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dd89190611a6e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e3c9190611a1c565b60405180910390a350505050565b6000610e5c610e576109f8565b6108ac565b610e9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e929061191c565b60405180910390fd5b610ea58383611030565b6001905092915050565b610ec381600561095090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b610f1d81600561118490919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcb9061197c565b60405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611097906119fc565b60405180910390fd5b6110ac6000838361102b565b80600260008282546110be9190611a6e565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111139190611a6e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516111789190611a1c565b60405180910390a35050565b61118e8282610f63565b6111cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c49061193c565b60405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008135905061123a81611c21565b92915050565b60008135905061124f81611c38565b92915050565b60006020828403121561126757600080fd5b60006112758482850161122b565b91505092915050565b6000806040838503121561129157600080fd5b600061129f8582860161122b565b92505060206112b08582860161122b565b9150509250929050565b6000806000606084860312156112cf57600080fd5b60006112dd8682870161122b565b93505060206112ee8682870161122b565b92505060406112ff86828701611240565b9150509250925092565b6000806040838503121561131c57600080fd5b600061132a8582860161122b565b925050602061133b85828601611240565b9150509250929050565b61134e81611af8565b82525050565b61135d81611b0a565b82525050565b600061136e82611a52565b6113788185611a5d565b9350611388818560208601611b4d565b61139181611c10565b840191505092915050565b60006113a9602383611a5d565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061140f601f83611a5d565b91507f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006000830152602082019050919050565b600061144f602283611a5d565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006114b5602683611a5d565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206260008301527f616c616e636500000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061151b603083611a5d565b91507f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766560008301527f20746865204d696e74657220726f6c65000000000000000000000000000000006020830152604082019050919050565b6000611581602183611a5d565b91507f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c60008301527f65000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006115e7602883611a5d565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206160008301527f6c6c6f77616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b600061164d602283611a5d565b91507f526f6c65733a206163636f756e7420697320746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006116b3602583611a5d565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611719602483611a5d565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061177f602583611a5d565b91507f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008301527f207a65726f0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006117e5601f83611a5d565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b61182181611b36565b82525050565b61183081611b40565b82525050565b600060408201905061184b6000830185611345565b6118586020830184611818565b9392505050565b60006020820190506118746000830184611354565b92915050565b600060208201905081810360008301526118948184611363565b905092915050565b600060208201905081810360008301526118b58161139c565b9050919050565b600060208201905081810360008301526118d581611402565b9050919050565b600060208201905081810360008301526118f581611442565b9050919050565b60006020820190508181036000830152611915816114a8565b9050919050565b600060208201905081810360008301526119358161150e565b9050919050565b6000602082019050818103600083015261195581611574565b9050919050565b60006020820190508181036000830152611975816115da565b9050919050565b6000602082019050818103600083015261199581611640565b9050919050565b600060208201905081810360008301526119b5816116a6565b9050919050565b600060208201905081810360008301526119d58161170c565b9050919050565b600060208201905081810360008301526119f581611772565b9050919050565b60006020820190508181036000830152611a15816117d8565b9050919050565b6000602082019050611a316000830184611818565b92915050565b6000602082019050611a4c6000830184611827565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611a7982611b36565b9150611a8483611b36565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ab957611ab8611bb2565b5b828201905092915050565b6000611acf82611b36565b9150611ada83611b36565b925082821015611aed57611aec611bb2565b5b828203905092915050565b6000611b0382611b16565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611b6b578082015181840152602081019050611b50565b83811115611b7a576000848401525b50505050565b60006002820490506001821680611b9857607f821691505b60208210811415611bac57611bab611be1565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b611c2a81611af8565b8114611c3557600080fd5b50565b611c4181611b36565b8114611c4c57600080fd5b5056fea264697066735822122009e9d9cd62ff92add938b32df7143173acf13f66313190163ebea71dee2e4fd864736f6c63430008000033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d714610288578063a9059cbb146102b8578063aa271e1a146102e8578063dd62ed3e14610318576100f5565b806370a082311461021457806395d89b4114610244578063983b2d5614610262578063986502751461027e576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806339509351146101b457806340c10f19146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610348565b60405161010f919061187a565b60405180910390f35b610132600480360381019061012d9190611309565b6103da565b60405161013f919061185f565b60405180910390f35b6101506103f8565b60405161015d9190611a1c565b60405180910390f35b610180600480360381019061017b91906112ba565b610402565b60405161018d919061185f565b60405180910390f35b61019e610503565b6040516101ab9190611a37565b60405180910390f35b6101ce60048036038101906101c99190611309565b610508565b6040516101db919061185f565b60405180910390f35b6101fe60048036038101906101f99190611309565b6105b4565b60405161020b919061185f565b60405180910390f35b61022e60048036038101906102299190611255565b610653565b60405161023b9190611a1c565b60405180910390f35b61024c61069b565b604051610259919061187a565b60405180910390f35b61027c60048036038101906102779190611255565b61072d565b005b610286610788565b005b6102a2600480360381019061029d9190611309565b61079a565b6040516102af919061185f565b60405180910390f35b6102d260048036038101906102cd9190611309565b61088e565b6040516102df919061185f565b60405180910390f35b61030260048036038101906102fd9190611255565b6108ac565b60405161030f919061185f565b60405180910390f35b610332600480360381019061032d919061127e565b6108c9565b60405161033f9190611a1c565b60405180910390f35b60606003805461035790611b80565b80601f016020809104026020016040519081016040528092919081815260200182805461038390611b80565b80156103d05780601f106103a5576101008083540402835291602001916103d0565b820191906000526020600020905b8154815290600101906020018083116103b357829003601f168201915b5050505050905090565b60006103ee6103e76109f8565b8484610a00565b6001905092915050565b6000600254905090565b600061040f848484610bcb565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061045a6109f8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d19061195c565b60405180910390fd5b6104f7856104e66109f8565b85846104f29190611ac4565b610a00565b60019150509392505050565b600090565b60006105aa6105156109f8565b8484600160006105236109f8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105a59190611a6e565b610a00565b6001905092915050565b60006105c66105c16109f8565b6108ac565b610605576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fc9061191c565b60405180910390fd5b61060f8383610e4a565b507f2d8eb9b9558d4b5ef1d238622692f6156d5822009340e26ab15fac05d64c12f08383604051610641929190611836565b60405180910390a16001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546106aa90611b80565b80601f01602080910402602001604051908101604052809291908181526020018280546106d690611b80565b80156107235780601f106106f857610100808354040283529160200191610723565b820191906000526020600020905b81548152906001019060200180831161070657829003601f168201915b5050505050905090565b61073d6107386109f8565b6108ac565b61077c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107739061191c565b60405180910390fd5b61078581610eaf565b50565b6107986107936109f8565b610f09565b565b600080600160006107a96109f8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610866576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085d906119dc565b60405180910390fd5b6108836108716109f8565b85858461087e9190611ac4565b610a00565b600191505092915050565b60006108a261089b6109f8565b8484610bcb565b6001905092915050565b60006108c2826005610f6390919063ffffffff16565b9050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61095a8282610f63565b1561099a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610991906118bc565b60405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a67906119bc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad7906118dc565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610bbe9190611a1c565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c329061199c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca29061189c565b60405180910390fd5b610cb683838361102b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610d3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d33906118fc565b60405180910390fd5b8181610d489190611ac4565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dd89190611a6e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e3c9190611a1c565b60405180910390a350505050565b6000610e5c610e576109f8565b6108ac565b610e9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e929061191c565b60405180910390fd5b610ea58383611030565b6001905092915050565b610ec381600561095090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b610f1d81600561118490919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcb9061197c565b60405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611097906119fc565b60405180910390fd5b6110ac6000838361102b565b80600260008282546110be9190611a6e565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111139190611a6e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516111789190611a1c565b60405180910390a35050565b61118e8282610f63565b6111cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c49061193c565b60405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008135905061123a81611c21565b92915050565b60008135905061124f81611c38565b92915050565b60006020828403121561126757600080fd5b60006112758482850161122b565b91505092915050565b6000806040838503121561129157600080fd5b600061129f8582860161122b565b92505060206112b08582860161122b565b9150509250929050565b6000806000606084860312156112cf57600080fd5b60006112dd8682870161122b565b93505060206112ee8682870161122b565b92505060406112ff86828701611240565b9150509250925092565b6000806040838503121561131c57600080fd5b600061132a8582860161122b565b925050602061133b85828601611240565b9150509250929050565b61134e81611af8565b82525050565b61135d81611b0a565b82525050565b600061136e82611a52565b6113788185611a5d565b9350611388818560208601611b4d565b61139181611c10565b840191505092915050565b60006113a9602383611a5d565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061140f601f83611a5d565b91507f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006000830152602082019050919050565b600061144f602283611a5d565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006114b5602683611a5d565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206260008301527f616c616e636500000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061151b603083611a5d565b91507f4d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766560008301527f20746865204d696e74657220726f6c65000000000000000000000000000000006020830152604082019050919050565b6000611581602183611a5d565b91507f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c60008301527f65000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006115e7602883611a5d565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206160008301527f6c6c6f77616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b600061164d602283611a5d565b91507f526f6c65733a206163636f756e7420697320746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006116b3602583611a5d565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611719602483611a5d565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061177f602583611a5d565b91507f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008301527f207a65726f0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006117e5601f83611a5d565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b61182181611b36565b82525050565b61183081611b40565b82525050565b600060408201905061184b6000830185611345565b6118586020830184611818565b9392505050565b60006020820190506118746000830184611354565b92915050565b600060208201905081810360008301526118948184611363565b905092915050565b600060208201905081810360008301526118b58161139c565b9050919050565b600060208201905081810360008301526118d581611402565b9050919050565b600060208201905081810360008301526118f581611442565b9050919050565b60006020820190508181036000830152611915816114a8565b9050919050565b600060208201905081810360008301526119358161150e565b9050919050565b6000602082019050818103600083015261195581611574565b9050919050565b60006020820190508181036000830152611975816115da565b9050919050565b6000602082019050818103600083015261199581611640565b9050919050565b600060208201905081810360008301526119b5816116a6565b9050919050565b600060208201905081810360008301526119d58161170c565b9050919050565b600060208201905081810360008301526119f581611772565b9050919050565b60006020820190508181036000830152611a15816117d8565b9050919050565b6000602082019050611a316000830184611818565b92915050565b6000602082019050611a4c6000830184611827565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611a7982611b36565b9150611a8483611b36565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ab957611ab8611bb2565b5b828201905092915050565b6000611acf82611b36565b9150611ada83611b36565b925082821015611aed57611aec611bb2565b5b828203905092915050565b6000611b0382611b16565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611b6b578082015181840152602081019050611b50565b83811115611b7a576000848401525b50505050565b60006002820490506001821680611b9857607f821691505b60208210811415611bac57611bab611be1565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b611c2a81611af8565b8114611c3557600080fd5b50565b611c4181611b36565b8114611c4c57600080fd5b5056fea264697066735822122009e9d9cd62ff92add938b32df7143173acf13f66313190163ebea71dee2e4fd864736f6c63430008000033","devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"mint(address,uint256)":{"details":"See {ERC20-_mint}. Requirements: - the caller must have the {MinterRole}."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``\'s tokens of at least `amount`."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":165,"contract":"contracts/MyToken.sol:MyToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":171,"contract":"contracts/MyToken.sol:MyToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":173,"contract":"contracts/MyToken.sol:MyToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":175,"contract":"contracts/MyToken.sol:MyToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":177,"contract":"contracts/MyToken.sol:MyToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":2167,"contract":"contracts/MyToken.sol:MyToken","label":"_minters","offset":0,"slot":"5","type":"t_struct(Role)2263_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Role)2263_storage":{"encoding":"inplace","label":"struct RolesLibrary.Role","members":[{"astId":2262,"contract":"contracts/MyToken.sol:MyToken","label":"bearer","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},103:function(f){f.exports=JSON.parse('{"address":"0x110f7D056F4a590E31b074F6989CC2b1A59A5848","abi":[{"inputs":[{"internalType":"uint256","name":"rate","type":"uint256"},{"internalType":"address payable","name":"wallet","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"contract KycContract","name":"_kyc","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"purchaser","type":"address"},{"indexed":true,"internalType":"address","name":"beneficiary","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokensPurchased","type":"event"},{"inputs":[{"internalType":"address","name":"beneficiary","type":"address"}],"name":"buyTokens","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"rate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wallet","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"weiRaised","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"transactionHash":"0x1a07431ce9348ead2da682531c04ed2a788cd932eca828a04d4ffd57d11a46fb","receipt":{"to":null,"from":"0x7A6ae83d3029042B69e481a30512e672E678eff8","contractAddress":"0x110f7D056F4a590E31b074F6989CC2b1A59A5848","transactionIndex":0,"gasUsed":"812980","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","blockHash":"0x0f140a3353b8216be58371d567d4465ef06157fcd2478f49e523f67a255a89b3","transactionHash":"0x1a07431ce9348ead2da682531c04ed2a788cd932eca828a04d4ffd57d11a46fb","logs":[],"blockNumber":104,"cumulativeGasUsed":"812980","status":1,"byzantium":true},"args":[1,"0x7A6ae83d3029042B69e481a30512e672E678eff8","0x4803E5D9dEb9e5A55f8a49c9759E4AD8b781B2ad","0x7048929F10695fFf60EC38feE8bF099E6A3812b5"],"solcInputHash":"d9a7f4546afe122fb3a2a49667d42337","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.0+commit.c7dfd78e\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"rate\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address payable\\",\\"name\\":\\"wallet\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"contract IERC20\\",\\"name\\":\\"token\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"contract KycContract\\",\\"name\\":\\"_kyc\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"purchaser\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"beneficiary\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"TokensPurchased\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"beneficiary\\",\\"type\\":\\"address\\"}],\\"name\\":\\"buyTokens\\",\\"outputs\\":[],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"rate\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"token\\",\\"outputs\\":[{\\"internalType\\":\\"contract IERC20\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"wallet\\",\\"outputs\\":[{\\"internalType\\":\\"address payable\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"weiRaised\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"stateMutability\\":\\"payable\\",\\"type\\":\\"receive\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"buyTokens(address)\\":{\\"details\\":\\"low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn\'t be called by another `nonReentrant` function.\\",\\"params\\":{\\"beneficiary\\":\\"Recipient of the token purchase\\"}},\\"rate()\\":{\\"returns\\":{\\"_0\\":\\"the number of token units a buyer gets per wei.\\"}},\\"token()\\":{\\"returns\\":{\\"_0\\":\\"the token being sold.\\"}},\\"wallet()\\":{\\"returns\\":{\\"_0\\":\\"the address where funds are collected.\\"}},\\"weiRaised()\\":{\\"returns\\":{\\"_0\\":\\"the amount of wei raised.\\"}}},\\"version\\":1},\\"userdoc\\":{\\"events\\":{\\"TokensPurchased(address,address,uint256,uint256)\\":{\\"notice\\":\\"Event for token purchase logging\\"}},\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/MyTokenSale.sol\\":\\"MyTokenSale\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":false,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor () {\\\\n        address msgSender = _msgSender();\\\\n        _owner = msgSender;\\\\n        emit OwnershipTransferred(address(0), msgSender);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        emit OwnershipTransferred(_owner, address(0));\\\\n        _owner = address(0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        emit OwnershipTransferred(_owner, newOwner);\\\\n        _owner = newOwner;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Contract module that helps prevent reentrant calls to a function.\\\\n *\\\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\\\n * available, which can be applied to functions to make sure there are no nested\\\\n * (reentrant) calls to them.\\\\n *\\\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\\\n * `nonReentrant` may not call one another. This can be worked around by making\\\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\\\n * points to them.\\\\n *\\\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\\\n * to protect against it, check out our blog post\\\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\\\n */\\\\nabstract contract ReentrancyGuard {\\\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\\\n    // word because each write operation emits an extra SLOAD to first read the\\\\n    // slot\'s contents, replace the bits taken up by the boolean, and then write\\\\n    // back. This is the compiler\'s defense against contract upgrades and\\\\n    // pointer aliasing, and it cannot be disabled.\\\\n\\\\n    // The values being non-zero value makes deployment a bit more expensive,\\\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\\\n    // amount. Since refunds are capped to a percentage of the total\\\\n    // transaction\'s gas, it is best to keep them low in cases like this one, to\\\\n    // increase the likelihood of the full refund coming into effect.\\\\n    uint256 private constant _NOT_ENTERED = 1;\\\\n    uint256 private constant _ENTERED = 2;\\\\n\\\\n    uint256 private _status;\\\\n\\\\n    constructor () {\\\\n        _status = _NOT_ENTERED;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\\\n     * function is not supported. It is possible to prevent this from happening\\\\n     * by making the `nonReentrant` function external, and make it call a\\\\n     * `private` function that does the actual work.\\\\n     */\\\\n    modifier nonReentrant() {\\\\n        // On the first call to nonReentrant, _notEntered will be true\\\\n        require(_status != _ENTERED, \\\\\\"ReentrancyGuard: reentrant call\\\\\\");\\\\n\\\\n        // Any calls to nonReentrant after this point will fail\\\\n        _status = _ENTERED;\\\\n\\\\n        _;\\\\n\\\\n        // By storing the original value once again, a refund is triggered (see\\\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\\\n        _status = _NOT_ENTERED;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC20.sol\\\\\\";\\\\nimport \\\\\\"./extensions/IERC20Metadata.sol\\\\\\";\\\\nimport \\\\\\"../../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC20} interface.\\\\n *\\\\n * This implementation is agnostic to the way tokens are created. This means\\\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\\\n *\\\\n * TIP: For a detailed writeup see our guide\\\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\\\n * to implement supply mechanisms].\\\\n *\\\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\\\n * of returning `false` on failure. This behavior is nonetheless conventional\\\\n * and does not conflict with the expectations of ERC20 applications.\\\\n *\\\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\\\n * This allows applications to reconstruct the allowance for all accounts just\\\\n * by listening to said events. Other implementations of the EIP may not emit\\\\n * these events, as it isn\'t required by the specification.\\\\n *\\\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\\\n * functions have been added to mitigate the well-known issues around setting\\\\n * allowances. See {IERC20-approve}.\\\\n */\\\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\\\n    mapping (address => uint256) private _balances;\\\\n\\\\n    mapping (address => mapping (address => uint256)) private _allowances;\\\\n\\\\n    uint256 private _totalSupply;\\\\n\\\\n    string private _name;\\\\n    string private _symbol;\\\\n\\\\n    /**\\\\n     * @dev Sets the values for {name} and {symbol}.\\\\n     *\\\\n     * The defaut value of {decimals} is 18. To select a different value for\\\\n     * {decimals} you should overload it.\\\\n     *\\\\n     * All two of these values are immutable: they can only be set once during\\\\n     * construction.\\\\n     */\\\\n    constructor (string memory name_, string memory symbol_) {\\\\n        _name = name_;\\\\n        _symbol = symbol_;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() public view virtual override returns (string memory) {\\\\n        return _name;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\\\n     * name.\\\\n     */\\\\n    function symbol() public view virtual override returns (string memory) {\\\\n        return _symbol;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the number of decimals used to get its user representation.\\\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\\\n     *\\\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\\\n     * overridden;\\\\n     *\\\\n     * NOTE: This information is only used for _display_ purposes: it in\\\\n     * no way affects any of the arithmetic of the contract, including\\\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\\\n     */\\\\n    function decimals() public view virtual override returns (uint8) {\\\\n        return 18;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-totalSupply}.\\\\n     */\\\\n    function totalSupply() public view virtual override returns (uint256) {\\\\n        return _totalSupply;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-balanceOf}.\\\\n     */\\\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\\\n        return _balances[account];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transfer}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - the caller must have a balance of at least `amount`.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(_msgSender(), recipient, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-allowance}.\\\\n     */\\\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\\\n        return _allowances[owner][spender];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-approve}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\\\n        _approve(_msgSender(), spender, amount);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC20-transferFrom}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` and `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     * - the caller must have allowance for ``sender``\'s tokens of at least\\\\n     * `amount`.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\\\n        _transfer(sender, recipient, amount);\\\\n\\\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\\\n        require(currentAllowance >= amount, \\\\\\"ERC20: transfer amount exceeds allowance\\\\\\");\\\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\\\n     *\\\\n     * This is an alternative to {approve} that can be used as a mitigation for\\\\n     * problems described in {IERC20-approve}.\\\\n     *\\\\n     * Emits an {Approval} event indicating the updated allowance.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `spender` cannot be the zero address.\\\\n     * - `spender` must have allowance for the caller of at least\\\\n     * `subtractedValue`.\\\\n     */\\\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\\\n        require(currentAllowance >= subtractedValue, \\\\\\"ERC20: decreased allowance below zero\\\\\\");\\\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\\\n\\\\n        return true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\\\n     *\\\\n     * This is internal function is equivalent to {transfer}, and can be used to\\\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `sender` cannot be the zero address.\\\\n     * - `recipient` cannot be the zero address.\\\\n     * - `sender` must have a balance of at least `amount`.\\\\n     */\\\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\\\n        require(sender != address(0), \\\\\\"ERC20: transfer from the zero address\\\\\\");\\\\n        require(recipient != address(0), \\\\\\"ERC20: transfer to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(sender, recipient, amount);\\\\n\\\\n        uint256 senderBalance = _balances[sender];\\\\n        require(senderBalance >= amount, \\\\\\"ERC20: transfer amount exceeds balance\\\\\\");\\\\n        _balances[sender] = senderBalance - amount;\\\\n        _balances[recipient] += amount;\\\\n\\\\n        emit Transfer(sender, recipient, amount);\\\\n    }\\\\n\\\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\\\n     * the total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `from` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     */\\\\n    function _mint(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: mint to the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(address(0), account, amount);\\\\n\\\\n        _totalSupply += amount;\\\\n        _balances[account] += amount;\\\\n        emit Transfer(address(0), account, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\\\n     * total supply.\\\\n     *\\\\n     * Emits a {Transfer} event with `to` set to the zero address.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     * - `account` must have at least `amount` tokens.\\\\n     */\\\\n    function _burn(address account, uint256 amount) internal virtual {\\\\n        require(account != address(0), \\\\\\"ERC20: burn from the zero address\\\\\\");\\\\n\\\\n        _beforeTokenTransfer(account, address(0), amount);\\\\n\\\\n        uint256 accountBalance = _balances[account];\\\\n        require(accountBalance >= amount, \\\\\\"ERC20: burn amount exceeds balance\\\\\\");\\\\n        _balances[account] = accountBalance - amount;\\\\n        _totalSupply -= amount;\\\\n\\\\n        emit Transfer(account, address(0), amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\\\n     *\\\\n     * This internal function is equivalent to `approve`, and can be used to\\\\n     * e.g. set automatic allowances for certain subsystems, etc.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `owner` cannot be the zero address.\\\\n     * - `spender` cannot be the zero address.\\\\n     */\\\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\\\n        require(owner != address(0), \\\\\\"ERC20: approve from the zero address\\\\\\");\\\\n        require(spender != address(0), \\\\\\"ERC20: approve to the zero address\\\\\\");\\\\n\\\\n        _allowances[owner][spender] = amount;\\\\n        emit Approval(owner, spender, amount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Hook that is called before any transfer of tokens. This includes\\\\n     * minting and burning.\\\\n     *\\\\n     * Calling conditions:\\\\n     *\\\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\'s tokens\\\\n     * will be to transferred to `to`.\\\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\\\n     * - when `to` is zero, `amount` of ``from``\'s tokens will be burned.\\\\n     * - `from` and `to` are never both zero.\\\\n     *\\\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\\\n     */\\\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `recipient`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC20.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\\\n *\\\\n * _Available since v4.1._\\\\n */\\\\ninterface IERC20Metadata is IERC20 {\\\\n    /**\\\\n     * @dev Returns the name of the token.\\\\n     */\\\\n    function name() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the symbol of the token.\\\\n     */\\\\n    function symbol() external view returns (string memory);\\\\n\\\\n    /**\\\\n     * @dev Returns the decimals places of the token.\\\\n     */\\\\n    function decimals() external view returns (uint8);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC20.sol\\\\\\";\\\\nimport \\\\\\"../../../utils/Address.sol\\\\\\";\\\\n\\\\n/**\\\\n * @title SafeERC20\\\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\\\n * contract returns false). Tokens that return no value (and instead revert or\\\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\\\n * successful.\\\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\\\n */\\\\nlibrary SafeERC20 {\\\\n    using Address for address;\\\\n\\\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\\\n    }\\\\n\\\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Deprecated. This function has issues similar to the ones found in\\\\n     * {IERC20-approve}, and its usage is discouraged.\\\\n     *\\\\n     * Whenever possible, use {safeIncreaseAllowance} and\\\\n     * {safeDecreaseAllowance} instead.\\\\n     */\\\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\\\n        // safeApprove should only be called when setting an initial allowance,\\\\n        // or when resetting it to zero. To increase and decrease it, use\\\\n        // \'safeIncreaseAllowance\' and \'safeDecreaseAllowance\'\\\\n        // solhint-disable-next-line max-line-length\\\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\\\n            \\\\\\"SafeERC20: approve from non-zero to non-zero allowance\\\\\\"\\\\n        );\\\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\\\n    }\\\\n\\\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\\\n    }\\\\n\\\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\\\n        unchecked {\\\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\\\n            require(oldAllowance >= value, \\\\\\"SafeERC20: decreased allowance below zero\\\\\\");\\\\n            uint256 newAllowance = oldAllowance - value;\\\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\\\n     * @param token The token targeted by the call.\\\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\\\n     */\\\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\\\n        // We need to perform a low level call here, to bypass Solidity\'s return data size checking mechanism, since\\\\n        // we\'re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\\\n        // the target address contains contract code and also asserts for success in the low-level call.\\\\n\\\\n        bytes memory returndata = address(token).functionCall(data, \\\\\\"SafeERC20: low-level call failed\\\\\\");\\\\n        if (returndata.length > 0) { // Return data is optional\\\\n            // solhint-disable-next-line max-line-length\\\\n            require(abi.decode(returndata, (bool)), \\\\\\"SafeERC20: ERC20 operation did not succeed\\\\\\");\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize, which returns 0 for contracts in\\\\n        // construction, since the code is only stored at the end of the\\\\n        // constructor execution.\\\\n\\\\n        uint256 size;\\\\n        // solhint-disable-next-line no-inline-assembly\\\\n        assembly { size := extcodesize(account) }\\\\n        return size > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\\\n        (bool success, ) = recipient.call{ value: amount }(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain`call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n      return functionCall(target, data, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\\\n        return _verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: static call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return _verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\\\n        require(isContract(target), \\\\\\"Address: delegate call to non-contract\\\\\\");\\\\n\\\\n        // solhint-disable-next-line avoid-low-level-calls\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return _verifyCallResult(success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            // Look for revert reason and bubble it up if present\\\\n            if (returndata.length > 0) {\\\\n                // The easiest way to bubble the revert reason is using memory via assembly\\\\n\\\\n                // solhint-disable-next-line no-inline-assembly\\\\n                assembly {\\\\n                    let returndata_size := mload(returndata)\\\\n                    revert(add(32, returndata), returndata_size)\\\\n                }\\\\n            } else {\\\\n                revert(errorMessage);\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n// CAUTION\\\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\\\n// because it relies on the compiler\'s built in overflow checks.\\\\n\\\\n/**\\\\n * @dev Wrappers over Solidity\'s arithmetic operations.\\\\n *\\\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\\\n * now has built in overflow checking.\\\\n */\\\\nlibrary SafeMath {\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            uint256 c = a + b;\\\\n            if (c < a) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b > a) return (false, 0);\\\\n            return (true, a - b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            // Gas optimization: this is cheaper than requiring \'a\' not being zero, but the\\\\n            // benefit is lost if \'b\' is also tested.\\\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\\\n            if (a == 0) return (true, 0);\\\\n            uint256 c = a * b;\\\\n            if (c / a != b) return (false, 0);\\\\n            return (true, c);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a / b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\\\n        unchecked {\\\\n            if (b == 0) return (false, 0);\\\\n            return (true, a % b);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the addition of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `+` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Addition cannot overflow.\\\\n     */\\\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a + b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a - b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\\\n     * overflow.\\\\n     *\\\\n     * Counterpart to Solidity\'s `*` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Multiplication cannot overflow.\\\\n     */\\\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a * b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a / b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting when dividing by zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\\\n        return a % b;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\\\n     * overflow (when the result is negative).\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `-` operator.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - Subtraction cannot overflow.\\\\n     */\\\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b <= a, errorMessage);\\\\n            return a - b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\\\n     * division by zero. The result is rounded towards zero.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Counterpart to Solidity\'s `/` operator. Note: this function uses a\\\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a / b;\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\\\n     * reverting with custom message when dividing by zero.\\\\n     *\\\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\\\n     *\\\\n     * Counterpart to Solidity\'s `%` operator. This function uses a `revert`\\\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\\\n     * invalid opcode to revert (consuming all remaining gas).\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The divisor cannot be zero.\\\\n     */\\\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\\\n        unchecked {\\\\n            require(b > 0, errorMessage);\\\\n            return a % b;\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\\",\\"license\\":\\"MIT\\"},\\"contracts/Crowdsale.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\\\\";\\\\n \\\\n/**\\\\n * @title Crowdsale\\\\n * @dev Crowdsale is a base contract for managing a token crowdsale,\\\\n * allowing investors to purchase tokens with ether. This contract implements\\\\n * such functionality in its most fundamental form and can be extended to provide additional\\\\n * functionality and/or custom behavior.\\\\n * The external interface represents the basic interface for purchasing tokens, and conforms\\\\n * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\\\\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\\\\n * the methods to add functionality. Consider using \'super\' where appropriate to concatenate\\\\n * behavior.\\\\n */\\\\ncontract Crowdsale is Context, ReentrancyGuard {\\\\n    using SafeMath for uint256;\\\\n    using SafeERC20 for IERC20;\\\\n\\\\n    // The token being sold\\\\n    IERC20 private _token;\\\\n\\\\n    // Address where funds are collected\\\\n    address payable private _wallet;\\\\n\\\\n    // How many token units a buyer gets per wei.\\\\n    // The rate is the conversion between wei and the smallest and indivisible token unit.\\\\n    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\\\\n    // 1 wei will give you 1 unit, or 0.001 TOK.\\\\n    uint256 private _rate;\\\\n\\\\n    // Amount of wei raised\\\\n    uint256 private _weiRaised;\\\\n\\\\n    /**\\\\n     * Event for token purchase logging\\\\n     * @param purchaser who paid for the tokens\\\\n     * @param beneficiary who got the tokens\\\\n     * @param value weis paid for purchase\\\\n     * @param amount amount of tokens purchased\\\\n     */\\\\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\\\\n\\\\n    /**\\\\n     * @param ratex Number of token units a buyer gets per wei\\\\n     * @dev The rate is the conversion between wei and the smallest and indivisible\\\\n     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\\\\n     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\\\\n     * @param walletx Address where collected funds will be forwarded to\\\\n     * @param tokenx Address of the token being sold\\\\n     */\\\\n    constructor (uint256 ratex, address payable walletx, IERC20 tokenx)  {\\\\n        require(ratex > 0, \\\\\\"Crowdsale: rate is 0\\\\\\");\\\\n        require(walletx != address(0), \\\\\\"Crowdsale: wallet is the zero address\\\\\\");\\\\n        require(address(tokenx) != address(0), \\\\\\"Crowdsale: token is the zero address\\\\\\");\\\\n\\\\n        _rate = ratex;\\\\n        _wallet = walletx;\\\\n        _token = tokenx;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev fallback function ***DO NOT OVERRIDE***\\\\n     * Note that other contracts will transfer funds with a base gas stipend\\\\n     * of 2300, which is not enough to call buyTokens. Consider calling\\\\n     * buyTokens directly when purchasing tokens from a contract.\\\\n     */\\\\n    receive () external payable {\\\\n        buyTokens(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @return the token being sold.\\\\n     */\\\\n    function token() public view returns (IERC20) {\\\\n        return _token;\\\\n    }\\\\n\\\\n    /**\\\\n     * @return the address where funds are collected.\\\\n     */\\\\n    function wallet() public view returns (address payable) {\\\\n        return _wallet;\\\\n    }\\\\n\\\\n    /**\\\\n     * @return the number of token units a buyer gets per wei.\\\\n     */\\\\n    function rate() public view returns (uint256) {\\\\n        return _rate;\\\\n    }\\\\n\\\\n    /**\\\\n     * @return the amount of wei raised.\\\\n     */\\\\n    function weiRaised() public view returns (uint256) {\\\\n        return _weiRaised;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev low level token purchase ***DO NOT OVERRIDE***\\\\n     * This function has a non-reentrancy guard, so it shouldn\'t be called by\\\\n     * another `nonReentrant` function.\\\\n     * @param beneficiary Recipient of the token purchase\\\\n     */\\\\n    function buyTokens(address beneficiary) public nonReentrant payable {\\\\n        uint256 weiAmount = msg.value;\\\\n        _preValidatePurchase(beneficiary, weiAmount);\\\\n\\\\n        // calculate token amount to be created\\\\n        uint256 tokens = _getTokenAmount(weiAmount);\\\\n\\\\n        // update state\\\\n        _weiRaised = _weiRaised.add(weiAmount);\\\\n\\\\n        _processPurchase(beneficiary, tokens);\\\\n        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\\\\n\\\\n        _updatePurchasingState(beneficiary, weiAmount);\\\\n\\\\n        _forwardFunds();\\\\n        _postValidatePurchase(beneficiary, weiAmount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\\\\n     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\\\\n     * Example from CappedCrowdsale.sol\'s _preValidatePurchase method:\\\\n     *     super._preValidatePurchase(beneficiary, weiAmount);\\\\n     *     require(weiRaised().add(weiAmount) <= cap);\\\\n     * @param beneficiary Address performing the token purchase\\\\n     * @param weiAmount Value in wei involved in the purchase\\\\n     */\\\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view virtual {\\\\n        require(beneficiary != address(0), \\\\\\"Crowdsale: beneficiary is the zero address\\\\\\");\\\\n        require(weiAmount != 0, \\\\\\"Crowdsale: weiAmount is 0\\\\\\");\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\\\\n     * conditions are not met.\\\\n     * @param beneficiary Address performing the token purchase\\\\n     * @param weiAmount Value in wei involved in the purchase\\\\n     */\\\\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view virtual {\\\\n        // solhint-disable-previous-line no-empty-blocks\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\\\\n     * its tokens.\\\\n     * @param beneficiary Address performing the token purchase\\\\n     * @param tokenAmount Number of tokens to be emitted\\\\n     */\\\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal virtual {\\\\n        _token.safeTransfer(beneficiary, tokenAmount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn\'t necessarily emit/send\\\\n     * tokens.\\\\n     * @param beneficiary Address receiving the tokens\\\\n     * @param tokenAmount Number of tokens to be purchased\\\\n     */\\\\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal virtual {\\\\n        _deliverTokens(beneficiary, tokenAmount);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\\\\n     * etc.)\\\\n     * @param beneficiary Address receiving the tokens\\\\n     * @param weiAmount Value in wei involved in the purchase\\\\n     */\\\\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal virtual {\\\\n        // solhint-disable-previous-line no-empty-blocks\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Override to extend the way in which ether is converted to tokens.\\\\n     * @param weiAmount Value in wei to be converted into tokens\\\\n     * @return Number of tokens that can be purchased with the specified _weiAmount\\\\n     */\\\\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\\\\n        return weiAmount.mul(_rate);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Determines how ETH is stored/forwarded on purchases.\\\\n     */\\\\n    function _forwardFunds() internal virtual {\\\\n        _wallet.transfer(msg.value);\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0xe30722a74cf2df41a9f7e94357d125b92e3a8b430eaab34d114d78b8044af611\\",\\"license\\":\\"MIT\\"},\\"contracts/KycContract.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\n\\\\n\\\\n// Know Your Customer Contract\\\\ncontract KycContract is Ownable{\\\\n\\\\n    mapping(address => bool)   allowed; \\\\n\\\\n    uint public kycPrice = 10;\\\\n\\\\n    event KycPurchased(address from, uint value);\\\\n\\\\n    function buyKyc() external payable {\\\\n        require(msg.value >= kycPrice, \\\\\\"You need to send more money to buy kyc\\\\\\");\\\\n        allowed[msg.sender] = true;\\\\n        emit KycPurchased(msg.sender, msg.value);\\\\n    }\\\\n\\\\n    function withdrawKyc() external onlyOwner {\\\\n        uint balance = address(this).balance;\\\\n        require(balance > 0, \\\\\\"nothing to withdraw...\\\\\\");\\\\n        payable(msg.sender).transfer(balance);\\\\n    }\\\\n\\\\n    function setKycPrice(uint _amountInWei) external onlyOwner {\\\\n        require(_amountInWei > 0, \\\\\\"you cannot set the kyc for free\\\\\\");\\\\n        kycPrice = _amountInWei;\\\\n    }\\\\n\\\\n    function setKycCompleted(address _addr) public onlyOwner {\\\\n        allowed[_addr] = true;\\\\n    }\\\\n\\\\n    function setKycRevoked(address _addr) public onlyOwner { \\\\n        allowed[_addr] = false;\\\\n    }\\\\n\\\\n    function kycCompleted(address _addr) public view returns(bool) {\\\\n        return allowed[_addr]; \\\\n    }\\\\n\\\\n\\\\n}\\",\\"keccak256\\":\\"0xc1c24f9592069167d1e89b55bc936143d8e2d5ad335713da9aab42fcd63f3a9f\\",\\"license\\":\\"MIT\\"},\\"contracts/MyTokenSale.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\n// import \\\\\\"./Crowdsale.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./KycContract.sol\\\\\\";\\\\n\\\\nimport \\\\\\"./mint/MintedCrowdsale.sol\\\\\\";\\\\n\\\\ncontract MyTokenSale is MintedCrowdsale {\\\\n\\\\n\\\\n    KycContract kyc;\\\\n\\\\n    constructor (\\\\n        uint256 rate,    // rate in TKNbits\\\\n        address payable wallet,\\\\n        IERC20 token,\\\\n        KycContract _kyc\\\\n    )\\\\n        MintedCrowdsale()\\\\n        Crowdsale(rate, wallet, token)\\\\n    {\\\\n        kyc = _kyc;\\\\n    }\\\\n\\\\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view override {\\\\n        super._preValidatePurchase(beneficiary, weiAmount);\\\\n        require(kyc.kycCompleted(msg.sender), \\\\\\"KYC not completed, purchase not allowed\\\\\\");\\\\n\\\\n    }\\\\n\\\\n\\\\n}\\",\\"keccak256\\":\\"0x30040adae3f08901137ebee7e0b81afd67010fb88e2cccefc177600072d53051\\",\\"license\\":\\"MIT\\"},\\"contracts/mint/ERC20Mintable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\\\\";\\\\nimport \\\\\\"./MinterRole.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\\\\n * which have permission to mint (create) new tokens as they see fit.\\\\n *\\\\n * At construction, the deployer of the contract is the only minter.\\\\n */\\\\n abstract contract ERC20Mintable is ERC20, MinterRole {\\\\n    /**\\\\n     * @dev See {ERC20-_mint}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the caller must have the {MinterRole}.\\\\n     */\\\\n    function mint(address account, uint256 amount) public  onlyMinter virtual returns (bool) {\\\\n        _mint(account, amount);\\\\n        return true;\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x949fff5e29f963398e2f3ec75a130753431fc9e002df86351fbe77ea25cde60a\\",\\"license\\":\\"MIT\\"},\\"contracts/mint/MintedCrowdsale.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../Crowdsale.sol\\\\\\";\\\\nimport \\\\\\"./ERC20Mintable.sol\\\\\\";\\\\n\\\\n/**\\\\n * @title MintedCrowdsale\\\\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\\\\n * Token ownership should be transferred to MintedCrowdsale for minting.\\\\n */\\\\nabstract contract MintedCrowdsale is Crowdsale {\\\\n    /**\\\\n     * @dev Overrides delivery by minting tokens upon purchase.\\\\n     * @param beneficiary Token purchaser\\\\n     * @param tokenAmount Number of tokens to be minted\\\\n     */\\\\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal override  {\\\\n        // Potentially dangerous assumption about the type of the token.\\\\n        require(\\\\n            ERC20Mintable(address(token())).mint(beneficiary, tokenAmount),\\\\n                \\\\\\"MintedCrowdsale: minting failed\\\\\\"\\\\n        );\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x1e9b5a65d261b2c57a3b2311dc9c4c4c59857b8e4e3bb6d4e7c68a6222ee1877\\",\\"license\\":\\"MIT\\"},\\"contracts/mint/MinterRole.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Context.sol\\\\\\";\\\\nimport \\\\\\"./RolesLibrary.sol\\\\\\";\\\\n\\\\n\\\\ncontract MinterRole is Context {\\\\n    \\\\n    using RolesLibrary for RolesLibrary.Role;\\\\n\\\\n    event MinterAdded(address indexed account);\\\\n    event MinterRemoved(address indexed account);\\\\n\\\\n    RolesLibrary.Role private _minters;\\\\n\\\\n    constructor () {\\\\n        _addMinter(_msgSender());\\\\n    }\\\\n\\\\n    modifier onlyMinter() {\\\\n        require(isMinter(_msgSender()), \\\\\\"MinterRole: caller does not have the Minter role\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    function isMinter(address account) public view returns (bool) {\\\\n        return _minters.has(account);\\\\n    }\\\\n\\\\n    function addMinter(address account) public onlyMinter {\\\\n        _addMinter(account);\\\\n    }\\\\n\\\\n    function renounceMinter() public {\\\\n        _removeMinter(_msgSender());\\\\n    }\\\\n\\\\n    function _addMinter(address account) internal {\\\\n        _minters.add(account);\\\\n        emit MinterAdded(account);\\\\n    }\\\\n\\\\n    function _removeMinter(address account) internal {\\\\n        _minters.remove(account);\\\\n        emit MinterRemoved(account);\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0x7cd5293e40b5bcf65eb7aec73e15a20799a0cc336f0470d3c142ab82a434c408\\",\\"license\\":\\"MIT\\"},\\"contracts/mint/RolesLibrary.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @title RolesX\\\\n * @dev Library for managing addresses assigned to a Role.\\\\n */\\\\nlibrary RolesLibrary {\\\\n    struct Role {\\\\n        mapping (address => bool) bearer;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Give an account access to this role.\\\\n     */\\\\n    function add(Role storage role, address account) internal {\\\\n        require(!has(role, account), \\\\\\"Roles: account already has role\\\\\\");\\\\n        role.bearer[account] = true;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Remove an account\'s access to this role.\\\\n     */\\\\n    function remove(Role storage role, address account) internal {\\\\n        require(has(role, account), \\\\\\"Roles: account does not have role\\\\\\");\\\\n        role.bearer[account] = false;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Check if an account has this role.\\\\n     * @return bool\\\\n     */\\\\n    function has(Role storage role, address account) internal view returns (bool) {\\\\n        require(account != address(0), \\\\\\"Roles: account is the zero address\\\\\\");\\\\n        return role.bearer[account];\\\\n    }\\\\n}\\",\\"keccak256\\":\\"0xcc91980f4b2dad46d231680736e8f3a994acc2983e56db48badde2e458f58dfa\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"","deployedBytecode":"0x60806040526004361061004e5760003560e01c80632c4e722e1461006a5780634042b66f14610095578063521eb273146100c0578063ec8ac4d8146100eb578063fc0c546a1461010757610065565b366100655761006361005e610132565b61013a565b005b600080fd5b34801561007657600080fd5b5061007f610260565b60405161008c9190610978565b60405180910390f35b3480156100a157600080fd5b506100aa61026a565b6040516100b79190610978565b60405180910390f35b3480156100cc57600080fd5b506100d5610274565b6040516100e29190610879565b60405180910390f35b61010560048036038101906101009190610644565b61013a565b005b34801561011357600080fd5b5061011c61029e565b60405161012991906108bd565b60405180910390f35b600033905090565b60026000541415610180576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017790610938565b60405180910390fd5b6002600081905550600034905061019782826102c8565b60006101a2826103c0565b90506101b9826004546103de90919063ffffffff16565b6004819055506101c983826103f4565b8273ffffffffffffffffffffffffffffffffffffffff166101e8610132565b73ffffffffffffffffffffffffffffffffffffffff167f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b848460405161022f929190610993565b60405180910390a36102418383610402565b610249610406565b6102538383610471565b5050600160008190555050565b6000600354905090565b6000600454905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102d28282610475565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df235fe4336040518263ffffffff1660e01b815260040161032d919061085e565b60206040518083038186803b15801561034557600080fd5b505afa158015610359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037d919061066d565b6103bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b3906108d8565b60405180910390fd5b5050565b60006103d76003548361052d90919063ffffffff16565b9050919050565b600081836103ec91906109cd565b905092915050565b6103fe8282610543565b5050565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561046e573d6000803e3d6000fd5b50565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156104e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc906108f8565b60405180910390fd5b6000811415610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052090610958565b60405180910390fd5b5050565b6000818361053b9190610a23565b905092915050565b61054b61029e565b73ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b8152600401610585929190610894565b602060405180830381600087803b15801561059f57600080fd5b505af11580156105b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d7919061066d565b610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610918565b60405180910390fd5b5050565b60008135905061062981610b2a565b92915050565b60008151905061063e81610b41565b92915050565b60006020828403121561065657600080fd5b60006106648482850161061a565b91505092915050565b60006020828403121561067f57600080fd5b600061068d8482850161062f565b91505092915050565b61069f81610a8f565b82525050565b6106ae81610a7d565b82525050565b6106bd81610ad7565b82525050565b60006106d06027836109bc565b91507f4b5943206e6f7420636f6d706c657465642c207075726368617365206e6f742060008301527f616c6c6f776564000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610736602a836109bc565b91507f43726f776473616c653a2062656e656669636961727920697320746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b600061079c601f836109bc565b91507f4d696e74656443726f776473616c653a206d696e74696e67206661696c6564006000830152602082019050919050565b60006107dc601f836109bc565b91507f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006000830152602082019050919050565b600061081c6019836109bc565b91507f43726f776473616c653a20776569416d6f756e742069732030000000000000006000830152602082019050919050565b61085881610acd565b82525050565b600060208201905061087360008301846106a5565b92915050565b600060208201905061088e6000830184610696565b92915050565b60006040820190506108a960008301856106a5565b6108b6602083018461084f565b9392505050565b60006020820190506108d260008301846106b4565b92915050565b600060208201905081810360008301526108f1816106c3565b9050919050565b6000602082019050818103600083015261091181610729565b9050919050565b600060208201905081810360008301526109318161078f565b9050919050565b60006020820190508181036000830152610951816107cf565b9050919050565b600060208201905081810360008301526109718161080f565b9050919050565b600060208201905061098d600083018461084f565b92915050565b60006040820190506109a8600083018561084f565b6109b5602083018461084f565b9392505050565b600082825260208201905092915050565b60006109d882610acd565b91506109e383610acd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a1857610a17610afb565b5b828201905092915050565b6000610a2e82610acd565b9150610a3983610acd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a7257610a71610afb565b5b828202905092915050565b6000610a8882610aad565b9050919050565b6000610a9a82610aad565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ae282610ae9565b9050919050565b6000610af482610aad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b610b3381610a7d565b8114610b3e57600080fd5b50565b610b4a81610aa1565b8114610b5557600080fd5b5056fea26469706673582212206abeabb7f1056e9a4b376ccce9a3a4be48f84146ffc894a8d797215dfee6758464736f6c63430008000033","devdoc":{"kind":"dev","methods":{"buyTokens(address)":{"details":"low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn\'t be called by another `nonReentrant` function.","params":{"beneficiary":"Recipient of the token purchase"}},"rate()":{"returns":{"_0":"the number of token units a buyer gets per wei."}},"token()":{"returns":{"_0":"the token being sold."}},"wallet()":{"returns":{"_0":"the address where funds are collected."}},"weiRaised()":{"returns":{"_0":"the amount of wei raised."}}},"version":1},"userdoc":{"events":{"TokensPurchased(address,address,uint256,uint256)":{"notice":"Event for token purchase logging"}},"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":120,"contract":"contracts/MyTokenSale.sol:MyTokenSale","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":1636,"contract":"contracts/MyTokenSale.sol:MyTokenSale","label":"_token","offset":0,"slot":"1","type":"t_contract(IERC20)734"},{"astId":1638,"contract":"contracts/MyTokenSale.sol:MyTokenSale","label":"_wallet","offset":0,"slot":"2","type":"t_address_payable"},{"astId":1640,"contract":"contracts/MyTokenSale.sol:MyTokenSale","label":"_rate","offset":0,"slot":"3","type":"t_uint256"},{"astId":1642,"contract":"contracts/MyTokenSale.sol:MyTokenSale","label":"_weiRaised","offset":0,"slot":"4","type":"t_uint256"},{"astId":2058,"contract":"contracts/MyTokenSale.sol:MyTokenSale","label":"kyc","offset":0,"slot":"5","type":"t_contract(KycContract)2049"}],"types":{"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_contract(IERC20)734":{"encoding":"inplace","label":"contract IERC20","numberOfBytes":"20"},"t_contract(KycContract)2049":{"encoding":"inplace","label":"contract KycContract","numberOfBytes":"20"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},104:function(f){f.exports=JSON.parse('{"address":"0x7048929F10695fFf60EC38feE8bF099E6A3812b5","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"KycPurchased","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"buyKyc","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_addr","type":"address"}],"name":"kycCompleted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"kycPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_addr","type":"address"}],"name":"setKycCompleted","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amountInWei","type":"uint256"}],"name":"setKycPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_addr","type":"address"}],"name":"setKycRevoked","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdrawKyc","outputs":[],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x145cfc83029a0f02ff02d9d8b49a7b76e754d567c69e831dc8e84b579be65cf2","receipt":{"to":null,"from":"0x7A6ae83d3029042B69e481a30512e672E678eff8","contractAddress":"0x7048929F10695fFf60EC38feE8bF099E6A3812b5","transactionIndex":0,"gasUsed":"860518","logsBloom":"0xblockHash":"0x4763540419a70c3ab1e16c90b1e887f28e11f9d48ea687c57b3340b08b803c45","transactionHash":"0x145cfc83029a0f02ff02d9d8b49a7b76e754d567c69e831dc8e84b579be65cf2","logs":[{"transactionIndex":0,"blockNumber":103,"transactionHash":"0x145cfc83029a0f02ff02d9d8b49a7b76e754d567c69e831dc8e84b579be65cf2","address":"0x7048929F10695fFf60EC38feE8bF099E6A3812b5","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000007a6ae83d3029042b69e481a30512e672e678eff8"],"data":"0x","logIndex":0,"blockHash":"0x4763540419a70c3ab1e16c90b1e887f28e11f9d48ea687c57b3340b08b803c45"}],"blockNumber":103,"cumulativeGasUsed":"860518","status":1,"byzantium":true},"args":[],"solcInputHash":"d9a7f4546afe122fb3a2a49667d42337","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.0+commit.c7dfd78e\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"KycPurchased\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"inputs\\":[],\\"name\\":\\"buyKyc\\",\\"outputs\\":[],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_addr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"kycCompleted\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"kycPrice\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_addr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setKycCompleted\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_amountInWei\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"setKycPrice\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_addr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setKycRevoked\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"withdrawKyc\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/KycContract.sol\\":\\"KycContract\\"},\\"evmVersion\\":\\"istanbul\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":false,\\"runs\\":200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor () {\\\\n        address msgSender = _msgSender();\\\\n        _owner = msgSender;\\\\n        emit OwnershipTransferred(address(0), msgSender);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        emit OwnershipTransferred(_owner, address(0));\\\\n        _owner = address(0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        emit OwnershipTransferred(_owner, newOwner);\\\\n        _owner = newOwner;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/*\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\\",\\"license\\":\\"MIT\\"},\\"contracts/KycContract.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\n\\\\n\\\\n// Know Your Customer Contract\\\\ncontract KycContract is Ownable{\\\\n\\\\n    mapping(address => bool)   allowed; \\\\n\\\\n    uint public kycPrice = 10;\\\\n\\\\n    event KycPurchased(address from, uint value);\\\\n\\\\n    function buyKyc() external payable {\\\\n        require(msg.value >= kycPrice, \\\\\\"You need to send more money to buy kyc\\\\\\");\\\\n        allowed[msg.sender] = true;\\\\n        emit KycPurchased(msg.sender, msg.value);\\\\n    }\\\\n\\\\n    function withdrawKyc() external onlyOwner {\\\\n        uint balance = address(this).balance;\\\\n        require(balance > 0, \\\\\\"nothing to withdraw...\\\\\\");\\\\n        payable(msg.sender).transfer(balance);\\\\n    }\\\\n\\\\n    function setKycPrice(uint _amountInWei) external onlyOwner {\\\\n        require(_amountInWei > 0, \\\\\\"you cannot set the kyc for free\\\\\\");\\\\n        kycPrice = _amountInWei;\\\\n    }\\\\n\\\\n    function setKycCompleted(address _addr) public onlyOwner {\\\\n        allowed[_addr] = true;\\\\n    }\\\\n\\\\n    function setKycRevoked(address _addr) public onlyOwner { \\\\n        allowed[_addr] = false;\\\\n    }\\\\n\\\\n    function kycCompleted(address _addr) public view returns(bool) {\\\\n        return allowed[_addr]; \\\\n    }\\\\n\\\\n\\\\n}\\",\\"keccak256\\":\\"0xc1c24f9592069167d1e89b55bc936143d8e2d5ad335713da9aab42fcd63f3a9f\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x6080604052600a60025534801561001557600080fd5b5060006100266100c960201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100d1565b600033905090565b610ddc806100e06000396000f3fe6080604052600436106100915760003560e01c8063c3dc6f3711610059578063c3dc6f3714610155578063dc3958cc1461016c578063df235fe414610195578063f2ca3013146101d2578063f2fde38b146101dc57610091565b80631289cea0146100965780634f50b79d146100bf57806370c9aedd146100ea578063715018a6146101135780638da5cb5b1461012a575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610a23565b610205565b005b3480156100cb57600080fd5b506100d46102ce565b6040516100e19190610d04565b60405180910390f35b3480156100f657600080fd5b50610111600480360381019061010c91906109fa565b6102d4565b005b34801561011f57600080fd5b506101286103aa565b005b34801561013657600080fd5b5061013f6104e4565b60405161014c9190610c05565b60405180910390f35b34801561016157600080fd5b5061016a61050d565b005b34801561017857600080fd5b50610193600480360381019061018e91906109fa565b61061b565b005b3480156101a157600080fd5b506101bc60048036038101906101b791906109fa565b6106f2565b6040516101c99190610c49565b60405180910390f35b6101da610748565b005b3480156101e857600080fd5b5061020360048036038101906101fe91906109fa565b61081f565b005b61020d6109c8565b73ffffffffffffffffffffffffffffffffffffffff1661022b6104e4565b73ffffffffffffffffffffffffffffffffffffffff1614610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610c84565b60405180910390fd5b600081116102c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bb90610ca4565b60405180910390fd5b8060028190555050565b60025481565b6102dc6109c8565b73ffffffffffffffffffffffffffffffffffffffff166102fa6104e4565b73ffffffffffffffffffffffffffffffffffffffff1614610350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034790610c84565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6103b26109c8565b73ffffffffffffffffffffffffffffffffffffffff166103d06104e4565b73ffffffffffffffffffffffffffffffffffffffff1614610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041d90610c84565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105156109c8565b73ffffffffffffffffffffffffffffffffffffffff166105336104e4565b73ffffffffffffffffffffffffffffffffffffffff1614610589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058090610c84565b60405180910390fd5b6000479050600081116105d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c890610ce4565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610617573d6000803e3d6000fd5b5050565b6106236109c8565b73ffffffffffffffffffffffffffffffffffffffff166106416104e4565b73ffffffffffffffffffffffffffffffffffffffff1614610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068e90610c84565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60025434101561078d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078490610cc4565b60405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f967489f2d72885d325edf0cf0d77e9deb9d88404866e7943bfb38cca6ee741943334604051610815929190610c20565b60405180910390a1565b6108276109c8565b73ffffffffffffffffffffffffffffffffffffffff166108456104e4565b73ffffffffffffffffffffffffffffffffffffffff161461089b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089290610c84565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090290610c64565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000813590506109df81610d78565b92915050565b6000813590506109f481610d8f565b92915050565b600060208284031215610a0c57600080fd5b6000610a1a848285016109d0565b91505092915050565b600060208284031215610a3557600080fd5b6000610a43848285016109e5565b91505092915050565b610a5581610d30565b82525050565b610a6481610d42565b82525050565b6000610a77602683610d1f565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610add602083610d1f565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000610b1d601f83610d1f565b91507f796f752063616e6e6f742073657420746865206b796320666f722066726565006000830152602082019050919050565b6000610b5d602683610d1f565b91507f596f75206e65656420746f2073656e64206d6f7265206d6f6e657920746f206260008301527f7579206b796300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610bc3601683610d1f565b91507f6e6f7468696e6720746f2077697468647261772e2e2e000000000000000000006000830152602082019050919050565b610bff81610d6e565b82525050565b6000602082019050610c1a6000830184610a4c565b92915050565b6000604082019050610c356000830185610a4c565b610c426020830184610bf6565b9392505050565b6000602082019050610c5e6000830184610a5b565b92915050565b60006020820190508181036000830152610c7d81610a6a565b9050919050565b60006020820190508181036000830152610c9d81610ad0565b9050919050565b60006020820190508181036000830152610cbd81610b10565b9050919050565b60006020820190508181036000830152610cdd81610b50565b9050919050565b60006020820190508181036000830152610cfd81610bb6565b9050919050565b6000602082019050610d196000830184610bf6565b92915050565b600082825260208201905092915050565b6000610d3b82610d4e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b610d8181610d30565b8114610d8c57600080fd5b50565b610d9881610d6e565b8114610da357600080fd5b5056fea2646970667358221220bc72354481255706bc09b2f3a5f1e776e5cc64649f78195d304019e8dd0a1ad564736f6c63430008000033","deployedBytecode":"0x6080604052600436106100915760003560e01c8063c3dc6f3711610059578063c3dc6f3714610155578063dc3958cc1461016c578063df235fe414610195578063f2ca3013146101d2578063f2fde38b146101dc57610091565b80631289cea0146100965780634f50b79d146100bf57806370c9aedd146100ea578063715018a6146101135780638da5cb5b1461012a575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610a23565b610205565b005b3480156100cb57600080fd5b506100d46102ce565b6040516100e19190610d04565b60405180910390f35b3480156100f657600080fd5b50610111600480360381019061010c91906109fa565b6102d4565b005b34801561011f57600080fd5b506101286103aa565b005b34801561013657600080fd5b5061013f6104e4565b60405161014c9190610c05565b60405180910390f35b34801561016157600080fd5b5061016a61050d565b005b34801561017857600080fd5b50610193600480360381019061018e91906109fa565b61061b565b005b3480156101a157600080fd5b506101bc60048036038101906101b791906109fa565b6106f2565b6040516101c99190610c49565b60405180910390f35b6101da610748565b005b3480156101e857600080fd5b5061020360048036038101906101fe91906109fa565b61081f565b005b61020d6109c8565b73ffffffffffffffffffffffffffffffffffffffff1661022b6104e4565b73ffffffffffffffffffffffffffffffffffffffff1614610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610c84565b60405180910390fd5b600081116102c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bb90610ca4565b60405180910390fd5b8060028190555050565b60025481565b6102dc6109c8565b73ffffffffffffffffffffffffffffffffffffffff166102fa6104e4565b73ffffffffffffffffffffffffffffffffffffffff1614610350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034790610c84565b60405180910390fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6103b26109c8565b73ffffffffffffffffffffffffffffffffffffffff166103d06104e4565b73ffffffffffffffffffffffffffffffffffffffff1614610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041d90610c84565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6105156109c8565b73ffffffffffffffffffffffffffffffffffffffff166105336104e4565b73ffffffffffffffffffffffffffffffffffffffff1614610589576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058090610c84565b60405180910390fd5b6000479050600081116105d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c890610ce4565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610617573d6000803e3d6000fd5b5050565b6106236109c8565b73ffffffffffffffffffffffffffffffffffffffff166106416104e4565b73ffffffffffffffffffffffffffffffffffffffff1614610697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068e90610c84565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60025434101561078d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078490610cc4565b60405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f967489f2d72885d325edf0cf0d77e9deb9d88404866e7943bfb38cca6ee741943334604051610815929190610c20565b60405180910390a1565b6108276109c8565b73ffffffffffffffffffffffffffffffffffffffff166108456104e4565b73ffffffffffffffffffffffffffffffffffffffff161461089b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089290610c84565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090290610c64565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000813590506109df81610d78565b92915050565b6000813590506109f481610d8f565b92915050565b600060208284031215610a0c57600080fd5b6000610a1a848285016109d0565b91505092915050565b600060208284031215610a3557600080fd5b6000610a43848285016109e5565b91505092915050565b610a5581610d30565b82525050565b610a6481610d42565b82525050565b6000610a77602683610d1f565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610add602083610d1f565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000610b1d601f83610d1f565b91507f796f752063616e6e6f742073657420746865206b796320666f722066726565006000830152602082019050919050565b6000610b5d602683610d1f565b91507f596f75206e65656420746f2073656e64206d6f7265206d6f6e657920746f206260008301527f7579206b796300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610bc3601683610d1f565b91507f6e6f7468696e6720746f2077697468647261772e2e2e000000000000000000006000830152602082019050919050565b610bff81610d6e565b82525050565b6000602082019050610c1a6000830184610a4c565b92915050565b6000604082019050610c356000830185610a4c565b610c426020830184610bf6565b9392505050565b6000602082019050610c5e6000830184610a5b565b92915050565b60006020820190508181036000830152610c7d81610a6a565b9050919050565b60006020820190508181036000830152610c9d81610ad0565b9050919050565b60006020820190508181036000830152610cbd81610b10565b9050919050565b60006020820190508181036000830152610cdd81610b50565b9050919050565b60006020820190508181036000830152610cfd81610bb6565b9050919050565b6000602082019050610d196000830184610bf6565b92915050565b600082825260208201905092915050565b6000610d3b82610d4e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b610d8181610d30565b8114610d8c57600080fd5b50565b610d9881610d6e565b8114610da357600080fd5b5056fea2646970667358221220bc72354481255706bc09b2f3a5f1e776e5cc64649f78195d304019e8dd0a1ad564736f6c63430008000033","devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1},"storageLayout":{"storage":[{"astId":7,"contract":"contracts/KycContract.sol:KycContract","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1924,"contract":"contracts/KycContract.sol:KycContract","label":"allowed","offset":0,"slot":"1","type":"t_mapping(t_address,t_bool)"},{"astId":1927,"contract":"contracts/KycContract.sol:KycContract","label":"kycPrice","offset":0,"slot":"2","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},143:function(f,e){},161:function(f,e,n){"use strict";n.r(e);var t=n(1),a=n.n(t),r=n(77),s=n.n(r),o=n(176),i=n(175),d=n(181),c=n(54),l=(n(109),n(174)),b=n(3),u=n.n(b),p=n(21),m=n(12),y=n(61),h=n(102),v=n(103),w=n(104),g=n(10),k=Object(t.createContext)({});function T(f){var e=f.children,n=Object(t.useState)(),a=Object(m.a)(n,2),r=a[0],s=a[1],o=Object(t.useState)(),i=Object(m.a)(o,2),d=i[0],l=i[1],b=Object(t.useState)("_"),T=Object(m.a)(b,2),R=T[0],_=T[1],C=Object(t.useState)(!1),x=Object(m.a)(C,2),E=x[0],M=x[1],O=Object(t.useState)(0),S=Object(m.a)(O,2),I=S[0],A=S[1],j=Object(t.useState)(),z=Object(m.a)(j,2),q=z[0],P=z[1],D=Object(t.useState)(),L=Object(m.a)(D,2),K=L[0],B=L[1],N=Object(t.useState)(),F=Object(m.a)(N,2),V=F[0],W=F[1],H=Object(t.useState)(""),X=Object(m.a)(H,2),U=X[0],G=X[1],Y=Object(t.useState)(!1),J=Object(m.a)(Y,2),Z=J[0],Q=J[1],$=Object(t.useState)(!1),ff=Object(m.a)($,2),ef=ff[0],nf=ff[1],tf=Object(t.useState)("0"),af=Object(m.a)(tf,2),rf=af[0],sf=af[1],of=Object(t.useState)(0),df=Object(m.a)(of,2),cf=df[0],lf=df[1],bf=Object(t.useState)("0"),uf=Object(m.a)(bf,2),pf=uf[0],mf=uf[1],yf={provider:r,setProvider:s,accounts:d,setAccounts:l,owner:R,setOwner:_,isOwner:E,setIsOwner:M,currentSupply:I,setCurrentSupply:A,myTokenContract:q,setMyTokenContract:P,myTokenSaleContract:K,setMyTokenSaleContract:B,kycContract:V,setKycContract:W,tokenSymbol:U,setTokenSymbol:G,loaded:Z,setLoaded:Q,inList:ef,setInList:nf,tokenRate:rf,setTokenRate:sf,clubRate:pf,setClubRate:mf,myTokenBalance:cf,setMyTokenBalance:lf,updateCurrentSupply:function(){var f=Object(p.a)(u.a.mark((function f(e){var n;return u.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:return f.next=2,e.totalSupply();case 2:n=f.sent,yf.setCurrentSupply(n.toNumber());case 4:case"end":return f.stop()}}),f)})));return function(e){return f.apply(this,arguments)}}(),updateUserTokens:function(){var f=Object(p.a)(u.a.mark((function f(e,n){var t,a,r=arguments;return u.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:return t=r.length>2&&void 0!==r[2]?r[2]:0,f.next=3,e.balanceOf(n);case 3:a=f.sent,yf.setMyTokenBalance(a.toNumber()),yf.myTokenContract&&yf.updateCurrentSupply(yf.myTokenContract),0!==t&&c.b.info("".concat(t," tokens was addeded to your account"));case 7:case"end":return f.stop()}}),f)})));return function(e,n){return f.apply(this,arguments)}}(),listenToTokenTransfer:function(){var f=Object(p.a)(u.a.mark((function f(e,n,t){var a;return u.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:a=e.filters.Transfer(null,n),e.on(a,(function(){for(var f=arguments.length,a=new Array(f),r=0;r<f;r++)a[r]=arguments[r];var s=a[a.length-1].blockNumber;s>t&&yf.updateUserTokens(e,n,a[2])}));case 2:case"end":return f.stop()}}),f)})));return function(e,n,t){return f.apply(this,arguments)}}(),listenToTokenSupply:function(){var f=Object(p.a)(u.a.mark((function f(e,n,t){return u.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:n.on("TokensPurchased",(function(){for(var f=arguments.length,n=new Array(f),a=0;a<f;a++)n[a]=arguments[a];var r=n[n.length-1].blockNumber;r>t&&(console.log("listenToTokenSupply:",n),yf.updateCurrentSupply(e))})),e.on("tokenMinted",(function(){for(var f=arguments.length,n=new Array(f),a=0;a<f;a++)n[a]=arguments[a];var r=n[n.length-1].blockNumber;r>t&&yf.updateCurrentSupply(e)}));case 2:case"end":return f.stop()}}),f)})));return function(e,n,t){return f.apply(this,arguments)}}()},hf=Object(t.useCallback)(Object(p.a)(u.a.mark((function f(){var e,n,t,a,r,s,o,i,c,l;return u.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:if(yf.loaded||!yf.owner||!window.ethereum||d){f.next=54;break}return e=new y.a.providers.Web3Provider(window.ethereum),f.next=4,window.ethereum.request({method:"eth_requestAccounts"});case 4:if(n=f.sent,!e||!n){f.next=54;break}return yf.setProvider(e),yf.setAccounts(n),t=e.getSigner(),a=new y.a.Contract(w.address,w.abi,t),r=new y.a.Contract(v.address,v.abi,t),s=new y.a.Contract(h.address,h.abi,t),yf.setMyTokenContract(s),yf.setMyTokenSaleContract(r),yf.setKycContract(a),f.t0=yf,f.t1=s,f.t2=n[0],f.next=20,e.getBlockNumber();case 20:return f.t3=f.sent,f.t0.listenToTokenTransfer.call(f.t0,f.t1,f.t2,f.t3),f.t4=yf,f.t5=s,f.t6=r,f.next=27,e.getBlockNumber();case 27:return f.t7=f.sent,f.t4.listenToTokenSupply.call(f.t4,f.t5,f.t6,f.t7),f.t8=yf,f.next=32,s.symbol();case 32:return f.t9=f.sent,f.t8.setTokenSymbol.call(f.t8,f.t9),f.next=36,a.kycCompleted(n[0]);case 36:return o=f.sent,yf.setInList(o),f.next=40,a.owner();case 40:return i=f.sent,yf.setOwner(i),yf.setIsOwner(i.toLowerCase()===n[0].toLowerCase()),yf.updateCurrentSupply(s),f.next=46,r.rate();case 46:return c=f.sent,yf.setTokenRate(c.toString()),yf.updateUserTokens(s,n[0],0),f.next=51,a.kycPrice();case 51:l=f.sent,yf.setClubRate(l.toString()),n&&n.length>0&&yf.setLoaded(!0);case 54:case"end":return f.stop()}}),f)}))),[yf.accounts,yf.provider,yf.loaded]);return Object(t.useEffect)((function(){hf()}),[hf]),Object(g.jsx)(k.Provider,{value:yf,children:e})}var R=function(){return Object(t.useContext)(k)};function _(){var f=R(),e=f.accounts,n=f.inList,t=f.myTokenBalance,a=e?"".concat(e[0].substr(0,5),"...").concat(e[0].substr(-5)):"0x000...0000";return Object(g.jsx)(l.a,{bg:"#2F2F2F",width:"100%",align:"center",children:Object(g.jsxs)(i.a,{justify:"space-between",p:"15",align:"center",maxW:1030,children:[Object(g.jsx)(o.a,{fontSize:"34",fontWeight:"bold",children:"Pog Token Sale"}),Object(g.jsxs)(i.a,{bg:"black",p:"3",borderRadius:"10",fontWeight:"bold",align:"flex-end",justify:"center",direction:"column",children:[Object(g.jsx)(o.a,{fontSize:"15",children:a}),Object(g.jsxs)(i.a,{direction:"row",children:[n?Object(g.jsx)(o.a,{fontSize:"12",mr:"1",color:"green.500",children:"approved"}):Object(g.jsx)(o.a,{fontSize:"12",mr:"1",color:"red.500",children:"not approved"}),Object(g.jsxs)(o.a,{fontSize:"12",color:"blue.500",children:[t," SPX"]})]})]})]})})}function C(){var f=R(),e=f.isOwner,n=f.inList,t="Hello Traveler";return e?t="Hellow Owner \\o/":n&&(t="Hello Traveler your are in the club!"),Object(g.jsx)(o.a,{fontWeight:"bold",color:"blue.500",children:t})}var x=n(48),E=n(182),M=n(180),O=n(60);function S(){var f=R(),e=f.kycContract,n=f.isOwner,t=f.accounts,a=f.inList,r=f.setInList,s=f.clubRate,i=Object(O.a)(),l=i.register,b=i.handleSubmit,m=function(){var f=Object(p.a)(u.a.mark((function f(a){var o,i,d;return u.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:if(!e||!t){f.next=26;break}return o=a||t[0],console.log("adddd",o),f.prev=3,f.next=6,e.kycCompleted(o);case 6:if(i=f.sent,d="".concat(o.substr(1,4),"...").concat(o.substr(-4)),!i){f.next=12;break}c.b.warning("".concat(d," is already in the list")),f.next=21;break;case 12:if(!n){f.next=17;break}return f.next=15,e.setKycCompleted(o);case 15:f.next=19;break;case 17:return f.next=19,e.buyKyc({value:s});case 19:c.b.info("".concat(d," addeded in the list")),t&&o===t[0]&&r(!0);case 21:f.next=26;break;case 23:f.prev=23,f.t0=f.catch(3),c.b.error("Error to process this address or you are not allowed");case 26:case"end":return f.stop()}}),f,null,[[3,23]])})));return function(e){return f.apply(this,arguments)}}(),y=function(){var f=Object(p.a)(u.a.mark((function f(e){return u.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:m(e.kycAddress);case 1:case"end":return f.stop()}}),f)})));return function(e){return f.apply(this,arguments)}}(),h=function(){var f=Object(p.a)(u.a.mark((function f(){return u.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:t&&m(t[0]);case 1:case"end":return f.stop()}}),f)})));return function(){return f.apply(this,arguments)}}(),v="Join the club to be able to buy tokens!";return n&&(v="You are not in the club!"),Object(g.jsxs)(d.a,{spacing:"5",align:"flex-start",fontWeight:"bold",children:[!a&&Object(g.jsxs)(d.a,{as:"form",onSubmit:b(h),spacing:"2",children:[Object(g.jsx)(o.a,{children:v}),Object(g.jsx)(E.a,{size:"lg",colorScheme:"blackAlpha",type:"submit",children:"Join Club"}),!n&&Object(g.jsxs)(o.a,{fontSize:"12",color:"red.300",children:[" * Only ",s," wei "]})]}),!n&&!a&&Object(g.jsx)(o.a,{children:"You can also contact the owner to try to get in for free"}),n&&Object(g.jsxs)(d.a,{align:"flex-start",spacing:"3",as:"form",onSubmit:b(y),children:[Object(g.jsx)(o.a,{children:"Add your friends to the club"}),Object(g.jsx)(M.a,Object(x.a)(Object(x.a)({},l("kycAddress")),{},{label:"KYC Address",type:"text"})),Object(g.jsx)(E.a,{mt:"3",size:"lg",colorScheme:"blackAlpha",type:"submit",children:"Add address"})]})]})}function I(){var f=R(),e=f.currentSupply,n=f.tokenSymbol,t=f.accounts,a=f.tokenRate,r=f.myTokenSaleContract,s=Object(O.a)(),i=s.register,c=s.handleSubmit,l=function(){var f=Object(p.a)(u.a.mark((function f(e){return u.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:e.tokens>0&&t&&r&&r.buyTokens(t[0],{value:y.a.BigNumber.from(e.tokens)});case 1:case"end":return f.stop()}}),f)})));return function(e){return f.apply(this,arguments)}}();return Object(g.jsxs)(d.a,{fontWeight:"bold",spacing:"5",align:"flex-start",children:[Object(g.jsxs)(o.a,{color:"yellowgreen",children:["Current Token Supply ",e," ",n]}),Object(g.jsxs)(d.a,{as:"form",onSubmit:c(l),spacing:"2",align:"flex-start",children:[Object(g.jsx)(o.a,{children:"How many tokens you want to buy?"}),Object(g.jsx)(M.a,Object(x.a)(Object(x.a)({},i("tokens")),{},{defaultValue:"5",label:"amount",type:"number"})),Object(g.jsx)(E.a,{size:"lg",colorScheme:"blackAlpha",type:"submit",children:"Buy Tokens"}),Object(g.jsxs)(o.a,{fontSize:"12",color:"red.300",children:[" * Only ",a," wei each"]})]}),Object(g.jsx)(o.a,{children:"You can also send weis to the following address to obtain tokens"}),Object(g.jsxs)(o.a,{fontSize:"14",color:"red.300",children:["Token value in ETH: ",y.a.utils.formatUnits(a,"ether")]}),Object(g.jsxs)(o.a,{fontSize:"14",color:"green.300",children:["Address to send wei: ",null===r||void 0===r?void 0:r.address]})]})}function A(){var f=R(),e=f.tokenSymbol,n=f.accounts,t=f.myTokenContract,a=f.myTokenSaleContract,r=Object(O.a)(),s=r.register,i=r.handleSubmit,c=function(){var f=Object(p.a)(u.a.mark((function f(e){return u.a.wrap((function(f){for(;;)switch(f.prev=f.next){case 0:e.tokens>0&&n&&t&&a&&t.mint(a.address,e.tokens);case 1:case"end":return f.stop()}}),f)})));return function(e){return f.apply(this,arguments)}}();return Object(g.jsxs)(d.a,{fontWeight:"bold",spacing:"5",align:"flex-start",children:[Object(g.jsxs)(o.a,{children:["Mine ",e," Token!"]}),Object(g.jsxs)(d.a,{as:"form",onSubmit:i(c),spacing:"2",align:"flex-start",children:[Object(g.jsx)(M.a,Object(x.a)(Object(x.a)({},s("tokens")),{},{defaultValue:"5",label:"amount",type:"number"})),Object(g.jsx)(E.a,{size:"lg",colorScheme:"blackAlpha",type:"submit",children:"Mine Tokens"})]})]})}var j=function(){var f=R(),e=f.accounts,n=f.isOwner,t=f.loaded,a=f.inList;return console.log("contas",e),t?Object(g.jsxs)(i.a,{maxW:1400,w:"100%",h:"100vh",mh:"auto",direction:"column",align:"center",children:[Object(g.jsx)(_,{}),Object(g.jsxs)(d.a,{pb:"100",maxW:1100,fontSize:"34",m:"5",spacing:"10",align:"flex-start",children:[Object(g.jsx)(C,{}),a&&Object(g.jsx)(I,{}),Object(g.jsx)(S,{}),n&&a&&Object(g.jsx)(A,{})]}),Object(g.jsx)(c.a,{})]}):Object(g.jsx)(o.a,{children:"Loading web3... Oi"})},z=n(179),q=n(178),P=Object(q.a)({styles:{global:{body:{bg:"gray.600",color:"gray.50"}}}});s.a.render(Object(g.jsx)(a.a.StrictMode,{children:Object(g.jsx)(z.a,{resetCSS:!0,theme:P,children:Object(g.jsx)(T,{children:Object(g.jsx)(j,{})})})}),document.getElementById("root"))}},[[161,1,2]]]);
//# sourceMappingURL=main.1eba137b.chunk.js.map